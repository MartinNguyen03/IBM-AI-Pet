/// <reference types="node" />
import { inspect, InspectOptions } from "util";
import Page, { TwilioResponsePayload } from "../../../../base/Page";
import Response from "../../../../http/response";
import DeployedDevices from "../../DeployedDevices";
/**
 * Options to pass to update a DeviceInstance
 */
export interface DeviceContextUpdateOptions {
    /** Provides a human readable descriptive text to be assigned to this Device, up to 256 characters long. */
    friendlyName?: string;
    /** Provides an arbitrary string identifier representing a human user to be associated with this Device, up to 256 characters long. */
    identity?: string;
    /** Specifies the unique string identifier of the Deployment group that this Device is going to be associated with. */
    deploymentSid?: string;
    /**  */
    enabled?: boolean;
}
/**
 * Options to pass to create a DeviceInstance
 */
export interface DeviceListInstanceCreateOptions {
    /** Provides a unique and addressable name to be assigned to this Device, to be used in addition to SID, up to 128 characters long. */
    uniqueName?: string;
    /** Provides a human readable descriptive text to be assigned to this Device, up to 256 characters long. */
    friendlyName?: string;
    /** Provides an arbitrary string identifier representing a human user to be associated with this Device, up to 256 characters long. */
    identity?: string;
    /** Specifies the unique string identifier of the Deployment group that this Device is going to be associated with. */
    deploymentSid?: string;
    /**  */
    enabled?: boolean;
}
/**
 * Options to pass to each
 */
export interface DeviceListInstanceEachOptions {
    /** Filters the resulting list of Devices by a unique string identifier of the Deployment they are associated with. */
    deploymentSid?: string;
    /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
    pageSize?: number;
    /** Function to process each record. If this and a positional callback are passed, this one will be used */
    callback?: (item: DeviceInstance, done: (err?: Error) => void) => void;
    /** Function to be called upon completion of streaming */
    done?: Function;
    /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
    limit?: number;
}
/**
 * Options to pass to list
 */
export interface DeviceListInstanceOptions {
    /** Filters the resulting list of Devices by a unique string identifier of the Deployment they are associated with. */
    deploymentSid?: string;
    /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
    pageSize?: number;
    /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
    limit?: number;
}
/**
 * Options to pass to page
 */
export interface DeviceListInstancePageOptions {
    /** Filters the resulting list of Devices by a unique string identifier of the Deployment they are associated with. */
    deploymentSid?: string;
    /** How many resources to return in each list page. The default is 50, and the maximum is 1000. */
    pageSize?: number;
    /** Page Number, this value is simply for client state */
    pageNumber?: number;
    /** PageToken provided by the API */
    pageToken?: string;
}
export interface DeviceContext {
    /**
     * Remove a DeviceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */
    remove(callback?: (error: Error | null, item?: boolean) => any): Promise<boolean>;
    /**
     * Fetch a DeviceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DeviceInstance
     */
    fetch(callback?: (error: Error | null, item?: DeviceInstance) => any): Promise<DeviceInstance>;
    /**
     * Update a DeviceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DeviceInstance
     */
    update(callback?: (error: Error | null, item?: DeviceInstance) => any): Promise<DeviceInstance>;
    /**
     * Update a DeviceInstance
     *
     * @param params - Parameter for request
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DeviceInstance
     */
    update(params: DeviceContextUpdateOptions, callback?: (error: Error | null, item?: DeviceInstance) => any): Promise<DeviceInstance>;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export interface DeviceContextSolution {
    fleetSid: string;
    sid: string;
}
export declare class DeviceContextImpl implements DeviceContext {
    protected _version: DeployedDevices;
    protected _solution: DeviceContextSolution;
    protected _uri: string;
    constructor(_version: DeployedDevices, fleetSid: string, sid: string);
    remove(callback?: (error: Error | null, item?: boolean) => any): Promise<boolean>;
    fetch(callback?: (error: Error | null, item?: DeviceInstance) => any): Promise<DeviceInstance>;
    update(params?: DeviceContextUpdateOptions | ((error: Error | null, item?: DeviceInstance) => any), callback?: (error: Error | null, item?: DeviceInstance) => any): Promise<DeviceInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): DeviceContextSolution;
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
interface DevicePayload extends TwilioResponsePayload {
    devices: DeviceResource[];
}
interface Device